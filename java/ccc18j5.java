import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.Arrays;import java.util.HashSet;import java.util.LinkedList;import java.util.StringTokenizer;public class Main {@SuppressWarnings({ "unchecked" })public static void main(String[] args) throws NumberFormatException, IOException {BufferedReader br = new BufferedReader(new InputStreamReader(System.in));int n = Integer.parseInt(br.readLine());HashSet<Integer>[] matrix = new HashSet[n];ArrayList<Integer> endpoints = new ArrayList<>();for(int i = 0; i < n; i++) {matrix[i] = new HashSet<Integer>();}for(int i = 0; i < n; i++) {StringTokenizer token = new StringTokenizer(br.readLine());int o = Integer.parseInt(token.nextToken());for(int j = 0; j < o; j++) {int tk = Integer.parseInt(token.nextToken());matrix[i].add(tk - 1);}if(o == 0) {endpoints.add(i);continue;}}if(endpoints.isEmpty()) {endpoints.add(n - 1);matrix[n - 1].clear();}LinkedList<Integer> next = new LinkedList<>();int[] levels = new int[n];Arrays.fill(levels, -1);levels[0] = 0;next.add(0);while(!next.isEmpty()) {int curr = next.poll();int level = levels[curr];for(int adj : matrix[curr]) {if(levels[adj] != -1) {continue;}levels[adj] = level + 1;next.add(adj);}}boolean reachable = true;int shortest = Integer.MAX_VALUE;for(int endpoint : endpoints) {int level = levels[endpoint];if(level < shortest && level != -1) {shortest = level;}}for(int l : levels) {if(l == -1) {reachable = false;}}System.out.println(reachable ? "Y" : "N");System.out.println(shortest + 1);}}
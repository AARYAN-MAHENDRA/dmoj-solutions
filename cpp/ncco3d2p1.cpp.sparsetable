//============================================================================
// Name        : RogerSolvesAClassicSegmentTreeProblemSparseTable.cpp
// Author      : Daxi the Taxi
// Version     :
// Copyright   : ALL YOUR CODE IS BELONG TO US
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
using namespace std;

const int MAX = 50001, B_MAX = 18;
int n, q, ba, bb,
	arr[MAX],
	sptable[B_MAX][MAX],
	msptable[B_MAX][MAX]; //Sparse Table (log2 of 100000 rounds up to 17)

void build(){ // Builds sparse table `sptable` from array `arr`
	copy(arr, arr + n + 1, sptable[0]); // First row is same as the array

	for (int i = 1; i < B_MAX; ++i) {
		int gap = 1 << (i - 1), maxv = n - (1 << i) + 1;

		for (int j = 1; j <= maxv; ++j) {
			sptable[i][j] = max(sptable[i - 1][j], sptable[i - 1][j + gap]);
		}
	}
}

int query(int a, int b){ // Querys the range from `a` to `b`
	// Find max bit
	int delta = b - a, maxbit = 1, // Max bit begins at 0 to account for `b - maxbit + 1` when `a == b`
			maxbitind = 0; // Index of the sparse table to use

	for (int i = B_MAX; i >= 0; --i) {
		int v = 1 << i;

		if(delta & v){
			maxbit = v;
			maxbitind = i;
			break;
		}
	}

	// Return Range
	return max(sptable[maxbitind][a],
			sptable[maxbitind][b - maxbit + 1]);
}

// Min version

void build2(){
	copy(arr, arr + n + 1, msptable[0]);
	for (int i = 1; i < B_MAX; ++i) {
		int gap = 1 << (i - 1), maxv = n - (1 << i) + 1;

		for (int j = 1; j <= maxv; ++j) {
			msptable[i][j] = min(msptable[i - 1][j], msptable[i - 1][j + gap]);
		}
	}
}

int query2(int a, int b){
	// Find max bit
	int delta = b - a, maxbit = 1, maxbitind = 0;

	for (int i = B_MAX; i >= 0; --i) {
		int v = 1 << i;

		if(delta & v){
			maxbit = v;
			maxbitind = i;
			break;
		}
	}

//	printf("for range %d, %d, maxbit=%d, maxbitind=%d\n", a, b, maxbit, maxbitind);

	// Return Range
	return min(msptable[maxbitind][a],
			msptable[maxbitind][b - maxbit + 1]);
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	// Input

	cin >> n >> q;

	for (int i = 1; i <= n; ++i) {
		cin >> arr[i];
	}

	// Sparse table

	build();
	build2();

	// Queries
	for (int i = 0; i < q; ++i) {
		cin >> ba >> bb;

		printf("%d\n", query(ba, bb) - query2(ba, bb));
//		printf("%d\n", query(ba, bb));
	}

	return 0;
}
